// <auto-generated />
using System;
using Edu.data.Concrete.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Edu.data.Migrations
{
    [DbContext(typeof(CourseContext))]
    [Migration("20200830052857_AddColumnIsDeleted")]
    partial class AddColumnIsDeleted
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7");

            modelBuilder.Entity("Edu.entity.Accommodation", b =>
                {
                    b.Property<int>("AccommodationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DistanceFromSchool")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityType")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MealType")
                        .HasColumnType("TEXT");

                    b.Property<int>("MinimumBooking")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PricePerWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomType")
                        .HasColumnType("TEXT");

                    b.HasKey("AccommodationId");

                    b.ToTable("Accommodation");
                });

            modelBuilder.Entity("Edu.entity.BImage", b =>
                {
                    b.Property<int>("BImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("BImageId");

                    b.ToTable("BImage");
                });

            modelBuilder.Entity("Edu.entity.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adress")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Discount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Iban")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PriceAirportPickup")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PriceHealthInsurance")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PriceVisa")
                        .HasColumnType("INTEGER");

                    b.HasKey("BranchId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("Edu.entity.BranchAccommodation", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccommodationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BranchId", "AccommodationId");

                    b.HasIndex("AccommodationId");

                    b.ToTable("BranchAccommodation");
                });

            modelBuilder.Entity("Edu.entity.BranchBImage", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BImageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BranchId", "BImageId");

                    b.HasIndex("BImageId");

                    b.ToTable("BranchBImage");
                });

            modelBuilder.Entity("Edu.entity.BranchCity", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BranchId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("BranchCity");
                });

            modelBuilder.Entity("Edu.entity.BranchCountry", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BranchId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("BranchCountry");
                });

            modelBuilder.Entity("Edu.entity.BranchCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchCourse");
                });

            modelBuilder.Entity("Edu.entity.BranchState", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BranchId", "StateId");

                    b.HasIndex("StateId");

                    b.ToTable("BranchState");
                });

            modelBuilder.Entity("Edu.entity.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Edu.entity.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Edu.entity.CountryCity", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CountryId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("CountryCity");
                });

            modelBuilder.Entity("Edu.entity.CountryState", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CountryId", "StateId");

                    b.HasIndex("StateId");

                    b.ToTable("CountryState");
                });

            modelBuilder.Entity("Edu.entity.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Discount")
                        .HasColumnType("REAL");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("HourWeek")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Level")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxStudent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double?>("PriceCourse")
                        .HasColumnType("REAL");

                    b.Property<string>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int>("minAge")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Edu.entity.CourseLanguage", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CourseLanguage");
                });

            modelBuilder.Entity("Edu.entity.CourseTime", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId", "TimeId");

                    b.HasIndex("TimeId");

                    b.ToTable("CourseTime");
                });

            modelBuilder.Entity("Edu.entity.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("LanguageId");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Edu.entity.SImage", b =>
                {
                    b.Property<int>("SImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("SImageId");

                    b.ToTable("SImage");
                });

            modelBuilder.Entity("Edu.entity.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<bool>("active")
                        .HasColumnType("INTEGER");

                    b.HasKey("SchoolId");

                    b.ToTable("School");
                });

            modelBuilder.Entity("Edu.entity.SchoolBranch", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SchoolId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("SchoolBranch");
                });

            modelBuilder.Entity("Edu.entity.SchoolSImage", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SImageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SchoolId", "SImageId");

                    b.HasIndex("SImageId");

                    b.ToTable("SchoolSImage");
                });

            modelBuilder.Entity("Edu.entity.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("StateId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Edu.entity.StateCity", b =>
                {
                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StateId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("StateCity");
                });

            modelBuilder.Entity("Edu.entity.Time", b =>
                {
                    b.Property<int>("TimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("TimeId");

                    b.ToTable("Time");
                });

            modelBuilder.Entity("Edu.entity.BranchAccommodation", b =>
                {
                    b.HasOne("Edu.entity.Accommodation", "Accommodation")
                        .WithMany("SchoolAccommodations")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edu.entity.Branch", "Branch")
                        .WithMany("BranchAccommodation")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Edu.entity.BranchBImage", b =>
                {
                    b.HasOne("Edu.entity.BImage", "BImage")
                        .WithMany("BranchImage")
                        .HasForeignKey("BImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edu.entity.Branch", "Branch")
                        .WithMany("BranchBImage")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Edu.entity.BranchCity", b =>
                {
                    b.HasOne("Edu.entity.Branch", "Branch")
                        .WithMany("BranchCity")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edu.entity.City", "City")
                        .WithMany("BranchCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Edu.entity.BranchCountry", b =>
                {
                    b.HasOne("Edu.entity.Branch", "Branch")
                        .WithMany("BranchCountry")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edu.entity.Country", "Country")
                        .WithMany("BranchCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Edu.entity.BranchCourse", b =>
                {
                    b.HasOne("Edu.entity.Branch", "Branch")
                        .WithMany("BranchCourse")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edu.entity.Course", "Course")
                        .WithMany("BranchCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Edu.entity.BranchState", b =>
                {
                    b.HasOne("Edu.entity.Branch", "Branch")
                        .WithMany("BranchState")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edu.entity.State", "State")
                        .WithMany("BranchStates")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Edu.entity.CountryCity", b =>
                {
                    b.HasOne("Edu.entity.City", "City")
                        .WithMany("CountryCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edu.entity.Country", "Country")
                        .WithMany("CountryCities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Edu.entity.CountryState", b =>
                {
                    b.HasOne("Edu.entity.Country", "Country")
                        .WithMany("CountryStates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edu.entity.State", "State")
                        .WithMany("CountryStates")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Edu.entity.CourseLanguage", b =>
                {
                    b.HasOne("Edu.entity.Course", "Course")
                        .WithMany("CourseLanguage")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edu.entity.Language", "Language")
                        .WithMany("CourseLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Edu.entity.CourseTime", b =>
                {
                    b.HasOne("Edu.entity.Course", "Course")
                        .WithMany("CourseTime")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edu.entity.Time", "Time")
                        .WithMany("CourseTimes")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Edu.entity.SchoolBranch", b =>
                {
                    b.HasOne("Edu.entity.Branch", "Branch")
                        .WithMany("SchoolBranch")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edu.entity.School", "School")
                        .WithMany("SchoolBranches")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Edu.entity.SchoolSImage", b =>
                {
                    b.HasOne("Edu.entity.SImage", "SImage")
                        .WithMany("SchoolSImage")
                        .HasForeignKey("SImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edu.entity.School", "School")
                        .WithMany("SchoolSImages")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Edu.entity.StateCity", b =>
                {
                    b.HasOne("Edu.entity.City", "City")
                        .WithMany("StateCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edu.entity.State", "State")
                        .WithMany("StateCities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
